cassandra
to enable UDFS => enable_user_defined_functions must be set true in cassandra.yaml file

CREATE KEYSPACE dishes_db WITH replication = {
  'class': 'SimpleStrategy', 
  'replication_factor': 1
};

USE dishes_db;

-- DROP TABLE IF EXISTS dishes;
-- CREATE TABLE dishes (
--   citystate TEXT,
--   dish TEXT,
--   avgrating DOUBLE,
--   businessId TEXT,
--   numreviews INT,
--   totalscore INT,
--   promotext TEXT,
--   promoscore INT,
--   PRIMARY KEY ((dish, citystate),businessid)
-- );


-- DROP TABLE IF EXISTS dishes;
-- CREATE TABLE dishes (
--   citystate TEXT,
--   dish TEXT,
--   avgrating DOUBLE,
--   businessId TEXT,
--   numreviews INT,
--   totalscore INT,
--   promotext TEXT,
--   promoscore INT,
--   PRIMARY KEY (citystate, dish)
-- );
-- CREATE INDEX ON dishes (businessid);

-- DROP TABLE IF EXISTS dishes;
-- CREATE TABLE dishes (
--   citystate TEXT,
--   dish TEXT,
--   avgrating DOUBLE,
--   businessId TEXT,
--   numreviews INT,
--   totalscore INT,
--   promotext TEXT,
--   promoscore INT,
--   PRIMARY KEY (dish, businessid)
-- );
-- CREATE INDEX ON dishes (citystate);


DROP TABLE IF EXISTS businesses;
CREATE TABLE businesses (
  businessId TEXT,
  name TEXT,
  full_address TEXT,
  citystate TEXT,
  city TEXT,
  state TEXT,
  stars DOUBLE,
  reviewcount INT,
  PRIMARY KEY (businessid, citystate)
);

/*
CREATE OR REPLACE FUNCTION incrementBy1 (num int) CALLED ON NULL INPUT RETURNS int LANGUAGE java AS 'return ((num == null) ? 0 : num) + 1;';

CREATE OR REPLACE FUNCTION getAverageScore (totalscore double, numreviews int) CALLED ON NULL INPUT RETURNS double LANGUAGE java AS 'return totalscore / numreviews;';

select numreviews, incrementBy1(numreviews), getAverageScore(totalscore,numreviews) from dishes;


UPDATE dishes SET avgrating = getAverageScore(totalscore,increment(numreviews)), numreviews = increment(numreviews), totalscore = (totalscore + 5) WHERE dish = 'udon' and restaurantid = 'abc'

  promo = "this is awesome udon",
  promorating INT,

UPDATE dishes SET avgrating = 5, numreviews = 100, totalscore = 500 WHERE dish = 'udon' and restaurantid = 'abc';



//create table for business with business id, full address, city, name, stars
//how can I filter on city?  maybe use composite key (city-businessID)? 




DROP TABLE IF EXISTS dummy;
CREATE TABLE dummy (
  citystate TEXT,
  dish TEXT,
  avgrating DOUBLE,
  businessId TEXT,
  numreviews INT,
  totalscore INT,
  promotext TEXT,
  promoscore INT,
  PRIMARY KEY (businessid, dish)
);
CREATE INDEX ON dummy (citystate);

1. get best dishes in a city 
select * from dummy where citystate = 'MunhallPA';

2. get best dishes by dish
select * from dummy where citystate = 'MunhallPA' and dish = 'burger';

3. get dishes by restaurant 
select * from dummy where citystate = 'MunhallPA' and businessid = 'asdfg' ALLOW FILTERING;

4. update/insert restaurant-dish combo with new review
update dummy set totalscore = 100 where businessid = 'asdfg' and dish = 'burger' if exists;

*/

-- this work!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DROP TABLE IF EXISTS dishes;
CREATE TABLE dishes (
  citystate TEXT,
  dish TEXT,
  avgrating DOUBLE,
  businessId TEXT,
  numreviews INT,
  totalscore INT,
  promotext TEXT,
  promoscore INT,
  PRIMARY KEY (citystate, dish, businessid)
);
CREATE INDEX ON dishes (businessid);


-- select * from dishes where citystate = 'MunhallPA';
-- select * from dishes where citystate = 'MunhallPA' and dish = 'burger';
-- select * from dishes where citystate = 'MunhallPA' and businessid = 'yHTLTr-QN-loO_7XoxS8qg';
-- select * from dishes where citystate = 'MunhallPA' and businessid = 'yHTLTr-QN-loO_7XoxS8qg' and dish = 'cake';
-- --update dishes set totalscore = 100 where businessid = 'yHTLTr-QN-loO_7XoxS8qg' and dish = 'cake' if exists;
-- --update dishes set totalscore = 2 where businessid = 'yHTLTr-QN-loO_7XoxS8qg' and dish = 'cake' if exists;
-- SELECT dish, businessid, avgrating, numreviews, promotext FROM dishes WHERE citystate = 'MunhallPA' AND dish IN ('pizza', 'burger');
-- SELECT businessid, full_address, name, reviewcount, stars FROM businesses WHERE citystate = 'MunhallPA' AND businessid IN ('asdfg','lkjh');
-- SELECT dish, businessid, avgrating, numreviews, promotext FROM dishes WHERE citystate = 'MunhallPA';
-- SELECT businessid, full_address, name, reviewcount, stars FROM businesses WHERE citystate = 'MunhallPA' AND businessid IN ('jhkhjk','asdasd');
-- SELECT dish, businessid, avgrating, numreviews, promotext FROM dishes WHERE citystate = 'MunhallPA' AND businessid = 'MunhallPA';
-- SELECT businessid, full_address, name, reviewcount, stars FROM dishes_db.businesses WHERE citystate = 'MunhallPA' AND businessid = 'ssdsdf';
-- --select distinct businessid from dishes;
-- select distinct businessid from businesses;


-- just a thought
-- DROP TABLE IF EXISTS newreviews;
-- CREATE TABLE newreviews (
--   businessid TEXT,
--   dish TEXT,
--   numreviews INT,
--   totalscore INT,
--   PRIMARY KEY (dish, businessid)
-- );


-- businessid has to be a primary key for the update to work
-- to search for all dishes by city, citystate needs to be a primary key
-- to search for specific dishes, dishes has to be a primary key or index
-- to search per business 

